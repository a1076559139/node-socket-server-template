/**
 * rmlServer类 - 用于监听消息
 */
'use strict';

const Redis = require('redis');
const Events = require('events');

class rmlServer extends Events {
	// 构造函数
	constructor() {
		super();
	}

	// 建立连接
	connect(key, options) {
		let self = this;

		this._key = key; //消息队列键名
		this._redis = Redis.createClient(options);

		// redis数据库连接失败
		this._redis.on('error', function (err) {
			self.listeners('error').length && self.emit('error', err);
		});

		// redis数据库连接关闭
		this._redis.on('close', function () {
			self.listeners('close').length && self.emit('close');
		});

		// redis数据库连接成功
		this._redis.on('connect', function () {
			self.listeners('connect').length && self.emit('connect');
		});
	}

	// 获取消息-多条模式
	_getMult() {
		let self = this;

		if (this._isGetting || this._doing_num >= this._msg_max_num) return;
		this._isGetting = true;

		this._redis.blpop(this._key, 0, function (err, results) {
			self._isGetting = false;
			if (err) {
				self.listeners('error').length && self.emit('error', err);
			} else {
				self._doing_num++;
				self.listeners('message').length && self.emit('message', results[1], function () {
					self._doing_num--;
					self._getMult();
				});
			}
			self._getMult();
		});
	}

	// 获取消息-单条模式
	_getOne() {
		let self = this;

		if (this._isGetting) return;
		this._isGetting = true;

		this._redis.blpop(this._key, 0, function (err, results) {
			self._isGetting = false;
			if (err) {
				self.listeners('error').length && self.emit('error', err);
				self._getOne();
			} else {
				self.listeners('message').length && self.emit('message', results[1], function () {
					self._getOne();
				});
			}
		});
	}

	// 获取消息-无限模式
	_getInf() {
		let self = this;

		this._redis.blpop(this._key, 0, function (err, results) {
			if (err) {
				self.listeners('error').length && self.emit('error', err);
			} else {
				self.listeners('message').length && self.emit('message', results[1]);
			}
			self._getInf();
		});
	}

	// 监听消息
	listen(num) {
		if (this._isGetting != null) {
			return; //禁止listen重复执行
		}
		this._isGetting = false; //是否正在获取消息中

		num = parseInt(num) > 0 ? parseInt(num) : 0;

		if (num == 0) {
			this._getInf(); //无限模式
		} else if (num == 1) {
			this._getOne(); //单条模式
		} else {
			this._msg_max_num = num; //最大处理条数
			this._doing_num = 0; //处理中的数量
			this._getMult(); //多条模式
		}
	}

	rpush(data, callback) {
		this._redis.rpush(this._key, data, function (err, results) {
			if (err) {
				self.listeners('error').length && self.emit('error', 'redis rpush err : ' + err + ' data : ' + data);
			}
			callback(err);
		});
	}
}



module.exports = rmlServer;